#!/bin/bash

#This writes a script that will copy an entire folder, including subdirs, while preserving structure, to a remote folder over ftp
#Should work like a poor mans cp -r
#output something like:
#
#mkdir test2
#cd test2
#mkdir 1
#cd 1
#put ~/foo/bar1 .
#cd ..
#put ~/bar2 .
#
#Then the script is fed into ftp
#won't deal with symbolics links or funny stuff like that
#will overwrite old folder, don't use as version control

DIR="test1"
NWDIR="test2"

USRID="lakelan"
PWD="splhcb2009"
HOST="lakelandecabin.ca"

touch $NWDIR
rm -r $NWDIR

#File we output to. This, in the end, should be a runnable script
OFILE=$(echo $(pwd)"/OFILE")
touch $OFILE
rm $OFILE

#Writing header, makes it bash and puts us at the head dir
echo "user "$USRID $PWD >> $OFILE
echo "cd public_html/sandbox/splitTables" >> $OFILE

#Put us in the right dir for reading
pushd $DIR > /dev/null

#array of all directories


index[0]=0
depth=0

#doing a DFS of the tree structure
#print branch name as we enter it
while [ $depth -ge 0 ]
do
	#fill up list at every iteration, because no 2d arrays in bash
	darr=(`find . -mindepth 1 -maxdepth 1 -type d -printf "%f\n"`) 
	
	#check if there are no more folders to enter.
	#if so, leave node by popping, decreasing depth
	#and iterating index of new level
	if [ ${index[depth]} -eq ${#darr[*]} ]
	then
		farr=(`find . -mindepth 1 -maxdepth 1 -type f -printf "%f\n"`) 
		echo "put "$(pwd)"/"${farr[0]} >> $OFILE
		echo "cd .." >> $OFILE
		popd > /dev/null
		depth=$(($depth-1))
		if [ $depth -ge 0 ]
		then
			index[$depth]=$((${index[depth]}+1))
		fi
	#If there's folders to go into, we go into them
	#push the folder, increase the depth, and set index
	#to 0
	else
		echo "mkdir "${darr[${index[$depth]}]} >> $OFILE
		echo "cd "${darr[${index[$depth]}]} >> $OFILE
		pushd ${darr[${index[$depth]}]} > /dev/null
		depth=$(($depth+1))
		index[$depth]=0

	fi
		
done

echo "quit" >> $OFILE

ftp -n $HOST < $OFILE
